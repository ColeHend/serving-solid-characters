// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using sharpAngleTemplate.data;

#nullable disable

namespace SharpAnglesTemplate.Migrations
{
    [DbContext(typeof(SharpAngleContext))]
    partial class SharpAngleContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("sharpAngleTemplate.models.entities.ClassEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HitDie")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProficiencyChoiceCount")
                        .HasColumnType("int");

                    b.Property<int>("SkillsId")
                        .HasColumnType("int");

                    b.Property<string>("SpellCastingAbility")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SkillsId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("sharpAngleTemplate.models.entities.ClassInvocationDescriptionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClassInvocationsEntityId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClassInvocationsEntityId");

                    b.ToTable("ClassInvocationDescriptionEntity");
                });

            modelBuilder.Entity("sharpAngleTemplate.models.entities.ClassInvocationsEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClassEntityId")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClassEntityId");

                    b.ToTable("ClassInvocationsEntity");
                });

            modelBuilder.Entity("sharpAngleTemplate.models.entities.ClassLevelEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClassEntityId")
                        .HasColumnType("int");

                    b.Property<int?>("ClassEntityId1")
                        .HasColumnType("int");

                    b.Property<string>("Features")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Other")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProficiencyBonus")
                        .HasColumnType("int");

                    b.Property<int>("SpellcastingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassEntityId");

                    b.HasIndex("ClassEntityId1");

                    b.HasIndex("SpellcastingId");

                    b.ToTable("ClassLevelEntity");
                });

            modelBuilder.Entity("sharpAngleTemplate.models.entities.ClassLevelSpellcastingEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CantripsKnown")
                        .HasColumnType("int");

                    b.Property<string>("InvocationsKnown")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("SpellSlotLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpellSlotsLevel1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpellSlotsLevel2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpellSlotsLevel3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpellSlotsLevel4")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpellSlotsLevel5")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpellSlotsLevel6")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpellSlotsLevel7")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpellSlotsLevel8")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpellSlotsLevel9")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ClassLevelSpellcastingEntity");
                });

            modelBuilder.Entity("sharpAngleTemplate.models.entities.InvocationsEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClassInvocationsEntityId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClassInvocationsEntityId");

                    b.ToTable("InvocationsEntity");
                });

            modelBuilder.Entity("sharpAngleTemplate.models.entities.ProficiencyChoicesEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClassEntityId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClassEntityId");

                    b.ToTable("ProficiencyChoicesEntity");
                });

            modelBuilder.Entity("sharpAngleTemplate.models.entities.RoleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RoleEntity");
                });

            modelBuilder.Entity("sharpAngleTemplate.models.entities.SavingThrowsEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClassEntityId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClassEntityId");

                    b.ToTable("SavingThrowsEntity");
                });

            modelBuilder.Entity("sharpAngleTemplate.models.entities.SkillEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SkillEntity");
                });

            modelBuilder.Entity("sharpAngleTemplate.models.entities.SkillsTextEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Skill")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SkillEntityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SkillEntityId");

                    b.ToTable("SkillsTextEntity");
                });

            modelBuilder.Entity("sharpAngleTemplate.models.entities.SpellClassNamesEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SpellEntityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SpellEntityId");

                    b.ToTable("SpellClassNamesEntity");
                });

            modelBuilder.Entity("sharpAngleTemplate.models.entities.SpellEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AreaOfEffect")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AttackType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CastingTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Components")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DamageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HealAtSlotLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HigherLevels")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsConcentration")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRitual")
                        .HasColumnType("bit");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Range")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("School")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Pokemon");
                });

            modelBuilder.Entity("sharpAngleTemplate.models.entities.StartingEquipmentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClassEntityId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClassEntityId");

                    b.ToTable("StartingEquipmentEntity");
                });

            modelBuilder.Entity("sharpAngleTemplate.models.entities.SubclassesEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClassEntityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClassEntityId");

                    b.ToTable("SubclassesEntity");
                });

            modelBuilder.Entity("sharpAngleTemplate.models.entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("MoreData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("sharpAngleTemplate.models.entities.ClassEntity", b =>
                {
                    b.HasOne("sharpAngleTemplate.models.entities.SkillEntity", "Skills")
                        .WithMany()
                        .HasForeignKey("SkillsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("sharpAngleTemplate.models.entities.ClassInvocationDescriptionEntity", b =>
                {
                    b.HasOne("sharpAngleTemplate.models.entities.ClassInvocationsEntity", null)
                        .WithMany("Description")
                        .HasForeignKey("ClassInvocationsEntityId");
                });

            modelBuilder.Entity("sharpAngleTemplate.models.entities.ClassInvocationsEntity", b =>
                {
                    b.HasOne("sharpAngleTemplate.models.entities.ClassEntity", null)
                        .WithMany("Invocations")
                        .HasForeignKey("ClassEntityId");
                });

            modelBuilder.Entity("sharpAngleTemplate.models.entities.ClassLevelEntity", b =>
                {
                    b.HasOne("sharpAngleTemplate.models.entities.ClassEntity", null)
                        .WithMany("ClassLevels")
                        .HasForeignKey("ClassEntityId");

                    b.HasOne("sharpAngleTemplate.models.entities.ClassEntity", null)
                        .WithMany("SpellCastingLevel")
                        .HasForeignKey("ClassEntityId1");

                    b.HasOne("sharpAngleTemplate.models.entities.ClassLevelSpellcastingEntity", "Spellcasting")
                        .WithMany()
                        .HasForeignKey("SpellcastingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Spellcasting");
                });

            modelBuilder.Entity("sharpAngleTemplate.models.entities.InvocationsEntity", b =>
                {
                    b.HasOne("sharpAngleTemplate.models.entities.ClassInvocationsEntity", null)
                        .WithMany("Invocations")
                        .HasForeignKey("ClassInvocationsEntityId");
                });

            modelBuilder.Entity("sharpAngleTemplate.models.entities.ProficiencyChoicesEntity", b =>
                {
                    b.HasOne("sharpAngleTemplate.models.entities.ClassEntity", null)
                        .WithMany("ProficiencyChoices")
                        .HasForeignKey("ClassEntityId");
                });

            modelBuilder.Entity("sharpAngleTemplate.models.entities.RoleEntity", b =>
                {
                    b.HasOne("sharpAngleTemplate.models.entities.User", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("sharpAngleTemplate.models.entities.SavingThrowsEntity", b =>
                {
                    b.HasOne("sharpAngleTemplate.models.entities.ClassEntity", null)
                        .WithMany("SavingThrows")
                        .HasForeignKey("ClassEntityId");
                });

            modelBuilder.Entity("sharpAngleTemplate.models.entities.SkillsTextEntity", b =>
                {
                    b.HasOne("sharpAngleTemplate.models.entities.SkillEntity", null)
                        .WithMany("Skills")
                        .HasForeignKey("SkillEntityId");
                });

            modelBuilder.Entity("sharpAngleTemplate.models.entities.SpellClassNamesEntity", b =>
                {
                    b.HasOne("sharpAngleTemplate.models.entities.SpellEntity", null)
                        .WithMany("Classes")
                        .HasForeignKey("SpellEntityId");
                });

            modelBuilder.Entity("sharpAngleTemplate.models.entities.StartingEquipmentEntity", b =>
                {
                    b.HasOne("sharpAngleTemplate.models.entities.ClassEntity", null)
                        .WithMany("StartingEquipment")
                        .HasForeignKey("ClassEntityId");
                });

            modelBuilder.Entity("sharpAngleTemplate.models.entities.SubclassesEntity", b =>
                {
                    b.HasOne("sharpAngleTemplate.models.entities.ClassEntity", null)
                        .WithMany("Subclasses")
                        .HasForeignKey("ClassEntityId");
                });

            modelBuilder.Entity("sharpAngleTemplate.models.entities.ClassEntity", b =>
                {
                    b.Navigation("ClassLevels");

                    b.Navigation("Invocations");

                    b.Navigation("ProficiencyChoices");

                    b.Navigation("SavingThrows");

                    b.Navigation("SpellCastingLevel");

                    b.Navigation("StartingEquipment");

                    b.Navigation("Subclasses");
                });

            modelBuilder.Entity("sharpAngleTemplate.models.entities.ClassInvocationsEntity", b =>
                {
                    b.Navigation("Description");

                    b.Navigation("Invocations");
                });

            modelBuilder.Entity("sharpAngleTemplate.models.entities.SkillEntity", b =>
                {
                    b.Navigation("Skills");
                });

            modelBuilder.Entity("sharpAngleTemplate.models.entities.SpellEntity", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("sharpAngleTemplate.models.entities.User", b =>
                {
                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
