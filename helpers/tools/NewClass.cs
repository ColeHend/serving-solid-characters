// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using SRDSpellsjson;
//
//    var the5ESrdClassesJson = The5ESrdClassesJson.FromJson(jsonString);

namespace SRDSpellsjson
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class The5ESrdClassesJson
    {
        [JsonProperty("Id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("Name", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("HitDie", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long? HitDie { get; set; }

        [JsonProperty("ProficiencyChoices", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<ProficiencyChoice> ProficiencyChoices { get; set; }

        [JsonProperty("Proficiencies", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Proficiencies { get; set; }

        [JsonProperty("SavingThrows", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<string> SavingThrows { get; set; }

        [JsonProperty("ClassLevels", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<ClassLevel> ClassLevels { get; set; }

        [JsonProperty("Subclasses", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<Subclass> Subclasses { get; set; }

        [JsonProperty("Spellcasting")]
        public object Spellcasting { get; set; }

        [JsonProperty("StartingEquipment", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public StartingEquipment StartingEquipment { get; set; }
    }

    public partial class ClassLevel
    {
        [JsonProperty("Info", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Info Info { get; set; }

        [JsonProperty("Features", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<ClassLevelFeature> Features { get; set; }

        [JsonProperty("ClassSpecific", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public ClassSpecific ClassSpecific { get; set; }

        [JsonProperty("AbilityScoreBonus", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long? AbilityScoreBonus { get; set; }

        [JsonProperty("ProfBonus", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long? ProfBonus { get; set; }

        [JsonProperty("Spellcasting", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Spellcasting Spellcasting { get; set; }
    }

    public partial class ClassSpecific
    {
        [JsonProperty("RageDamageBonus", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long? RageDamageBonus { get; set; }

        [JsonProperty("RageCount", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long? RageCount { get; set; }

        [JsonProperty("BrutalCriticalDice", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long? BrutalCriticalDice { get; set; }

        [JsonProperty("AdditionalMagicalSecretsMaxLvl", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long? AdditionalMagicalSecretsMaxLvl { get; set; }

        [JsonProperty("BardicInspirationDie", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long? BardicInspirationDie { get; set; }

        [JsonProperty("MagicalSecretsMax5", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long? MagicalSecretsMax5 { get; set; }

        [JsonProperty("MagicalSecretsMax7", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long? MagicalSecretsMax7 { get; set; }

        [JsonProperty("MagicalSecretsMax9", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long? MagicalSecretsMax9 { get; set; }

        [JsonProperty("SongOfRestDie", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long? SongOfRestDie { get; set; }

        [JsonProperty("ChannelDivinityCharges", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long? ChannelDivinityCharges { get; set; }

        [JsonProperty("DestroyUndeadCr", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string DestroyUndeadCr { get; set; }

        [JsonProperty("WildShapeMaxCr", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string WildShapeMaxCr { get; set; }

        [JsonProperty("WildShapeFly", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public bool? WildShapeFly { get; set; }

        [JsonProperty("WildShapeSwim", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public bool? WildShapeSwim { get; set; }

        [JsonProperty("ActionSurges", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long? ActionSurges { get; set; }

        [JsonProperty("ExtraAttacks", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long? ExtraAttacks { get; set; }

        [JsonProperty("IndomitableUses", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long? IndomitableUses { get; set; }

        [JsonProperty("MartialArts", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string MartialArts { get; set; }

        [JsonProperty("UnarmoredMovement", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long? UnarmoredMovement { get; set; }

        [JsonProperty("AuraRange", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long? AuraRange { get; set; }

        [JsonProperty("FavoredEnemies", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long? FavoredEnemies { get; set; }

        [JsonProperty("FavoredTerrain", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long? FavoredTerrain { get; set; }

        [JsonProperty("SneakAttack", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string SneakAttack { get; set; }

        [JsonProperty("CreatingSpellSlots", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string CreatingSpellSlots { get; set; }

        [JsonProperty("MetamagicKnown", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long? MetamagicKnown { get; set; }

        [JsonProperty("SorceryPoints", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long? SorceryPoints { get; set; }

        [JsonProperty("InvocationsKnown", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long? InvocationsKnown { get; set; }

        [JsonProperty("MysticArcanumLevel6", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long? MysticArcanumLevel6 { get; set; }

        [JsonProperty("MysticArcanumLevel7", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long? MysticArcanumLevel7 { get; set; }

        [JsonProperty("MysticArcanumLevel8", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long? MysticArcanumLevel8 { get; set; }

        [JsonProperty("MysticArcanumLevel9", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long? MysticArcanumLevel9 { get; set; }

        [JsonProperty("ArcaneRecoveryLevels", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long? ArcaneRecoveryLevels { get; set; }
    }

    public partial class ClassLevelFeature
    {
        [JsonProperty("Info", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Info Info { get; set; }

        [JsonProperty("Name", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("Value", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public FeatureValueClass Value { get; set; }
    }

    public partial class Info
    {
        [JsonProperty("ClassName", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string ClassName { get; set; }

        [JsonProperty("SubclassName")]
        public string SubclassName { get; set; }

        [JsonProperty("Level", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long? Level { get; set; }

        [JsonProperty("Type")]
        public object Type { get; set; }

        [JsonProperty("Other")]
        public object Other { get; set; }
    }

    public partial class FeatureValueClass
    {
        [JsonProperty("Name", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("Desc", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Desc { get; set; }
    }

    public partial class Spellcasting
    {
        [JsonProperty("cantrips_known", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long? CantripsKnown { get; set; }

        [JsonProperty("spells_known", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long? SpellsKnown { get; set; }

        [JsonProperty("spell_slots_level_1", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long? SpellSlotsLevel1 { get; set; }

        [JsonProperty("spell_slots_level_2", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long? SpellSlotsLevel2 { get; set; }

        [JsonProperty("spell_slots_level_3", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long? SpellSlotsLevel3 { get; set; }

        [JsonProperty("spell_slots_level_4", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long? SpellSlotsLevel4 { get; set; }

        [JsonProperty("spell_slots_level_5", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long? SpellSlotsLevel5 { get; set; }

        [JsonProperty("spell_slots_level_6", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long? SpellSlotsLevel6 { get; set; }

        [JsonProperty("spell_slots_level_7", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long? SpellSlotsLevel7 { get; set; }

        [JsonProperty("spell_slots_level_8", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long? SpellSlotsLevel8 { get; set; }

        [JsonProperty("spell_slots_level_9", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long? SpellSlotsLevel9 { get; set; }
    }

    public partial class ProficiencyChoice
    {
        [JsonProperty("Choose", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long? Choose { get; set; }

        [JsonProperty("Type", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("Choices", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Choices { get; set; }
    }

    public partial class StartingEquipment
    {
        [JsonProperty("Class", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Class { get; set; }

        [JsonProperty("Quantity")]
        public object Quantity { get; set; }

        [JsonProperty("Choice1", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<Choice> Choice1 { get; set; }

        [JsonProperty("Choice2", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<Choice> Choice2 { get; set; }

        [JsonProperty("Choice3", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<Choice> Choice3 { get; set; }

        [JsonProperty("Choice4", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<Choice> Choice4 { get; set; }

        [JsonProperty("Choice5", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<Choice> Choice5 { get; set; }
    }

    public partial class Choice
    {
        [JsonProperty("Choose", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long? Choose { get; set; }

        [JsonProperty("Type", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("Choices", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<Choice1Choice> Choices { get; set; }
    }

    public partial class Choice1Choice
    {
        [JsonProperty("Item", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Item { get; set; }

        [JsonProperty("Quantity")]
        public long? Quantity { get; set; }

        [JsonProperty("Desc")]
        public List<string> Desc { get; set; }
    }

    public partial class Subclass
    {
        [JsonProperty("Id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("Name", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("SubclassFlavor", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string SubclassFlavor { get; set; }

        [JsonProperty("Desc", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Desc { get; set; }

        [JsonProperty("Features", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<SubclassFeature> Features { get; set; }

        [JsonProperty("Class", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Class { get; set; }

        [JsonProperty("Spells")]
        public object Spells { get; set; }
    }

    public partial class SubclassFeature
    {
        [JsonProperty("Info", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Info Info { get; set; }

        [JsonProperty("Name", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        
    }

    public partial class ValueValue
    {
        [JsonProperty("Choice", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Choice Choice { get; set; }

        [JsonProperty("Desc", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Desc { get; set; }
    }

    public partial struct ValueUnion
    {
        public List<string> StringArray;
        public ValueValue ValueValue;

        public static implicit operator ValueUnion(List<string> StringArray) => new ValueUnion { StringArray = StringArray };
        public static implicit operator ValueUnion(ValueValue ValueValue) => new ValueUnion { ValueValue = ValueValue };
    }

    public partial class The5ESrdClassesJson
    {
        public static List<The5ESrdClassesJson> FromJson(string json) => JsonConvert.DeserializeObject<List<The5ESrdClassesJson>>(json, SRDSpellsjson.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this List<The5ESrdClassesJson> self) => JsonConvert.SerializeObject(self, SRDSpellsjson.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                ValueUnionConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class PurpleParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly PurpleParseStringConverter Singleton = new PurpleParseStringConverter();
    }

    internal class FluffyParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(bool) || t == typeof(bool?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            bool b;
            if (Boolean.TryParse(value, out b))
            {
                return b;
            }
            throw new Exception("Cannot unmarshal type bool");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (bool)untypedValue;
            var boolString = value ? "true" : "false";
            serializer.Serialize(writer, boolString);
            return;
        }

        public static readonly FluffyParseStringConverter Singleton = new FluffyParseStringConverter();
    }

    internal class ValueUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ValueUnion) || t == typeof(ValueUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<ValueValue>(reader);
                    return new ValueUnion { ValueValue = objectValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<List<string>>(reader);
                    return new ValueUnion { StringArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type ValueUnion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (ValueUnion)untypedValue;
            if (value.StringArray != null)
            {
                serializer.Serialize(writer, value.StringArray);
                return;
            }
            if (value.ValueValue != null)
            {
                serializer.Serialize(writer, value.ValueValue);
                return;
            }
            throw new Exception("Cannot marshal type ValueUnion");
        }

        public static readonly ValueUnionConverter Singleton = new ValueUnionConverter();
    }
}
