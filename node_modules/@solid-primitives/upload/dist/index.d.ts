import { Accessor, Setter } from 'solid-js';

/**
 * @property `source` - DOMString containing a URL representing the object given in the parameter
 */
type UploadFile = {
    source: string;
    name: string;
    size: number;
    file: File;
};
/**
 * @property `accept` - Comma-separated list of one or more file types, or unique file type specifiers
 * @link `accept` - https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/accept
 */
type FileUploaderOptions = {
    accept?: string;
    multiple?: boolean;
};
type UserCallback = (files: UploadFile[]) => void | Promise<void>;
type UserCallback2 = () => void | Promise<void>;
interface FileUploader {
    files: Accessor<UploadFile[]>;
    selectFiles: (callback: (files: UploadFile[]) => void | Promise<void>) => void;
    removeFile: (fileName: string) => void;
    clearFiles: () => void;
}
type FileUploaderDirective = {
    userCallback: (files: UploadFile[]) => void | Promise<void>;
    setFiles: Setter<UploadFile[]>;
};
interface Dropzone<T extends HTMLElement = HTMLElement> {
    setRef: (ref: T) => void;
    files: Accessor<UploadFile[]>;
    isDragging: Accessor<boolean>;
    removeFile: (fileName: string) => void;
    clearFiles: () => void;
}
/**
 * @property `accept` - Comma-separated list of one or more file types, or unique file type specifiers
 * @link `accept` - https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/accept
 */
interface DropzoneOptions {
    onDrop?: UserCallback;
    onDragStart?: UserCallback;
    onDragEnter?: UserCallback;
    onDragEnd?: UserCallback;
    onDragLeave?: UserCallback;
    onDragOver?: UserCallback;
    onDrag?: UserCallback;
}

/**
 * Primitive to make uploading files easier.
 *
 * @returns `files`
 * @returns `selectFiles` - Open file picker, set files and run user callback
 * @returns `removeFile`
 * @returns `clearFiles`
 *
 * @example
 * ```ts
 * // multiple files
 * const {files, selectFiles} = createFileUploader({ multiple: true, accept: "image/*" });
 * selectFiles(files => files.forEach(file => console.log(file)));
 *
 * // single file
 * const {file, selectFile} = createFileUploader();
 * selectFiles(([{ source, name, size, file }]) => console.log({ source, name, size, file }));
 * ```
 */
declare function createFileUploader(options?: FileUploaderOptions): FileUploader;

/**
 * Primitive to make working with dropzones easier.
 *
 * @returns `setRef`
 * @returns `files`
 * @returns `isDragging`
 * @returns `removeFile`
 * @returns `clearFiles`
 *
 * @example
 * ```ts
 * // run async user callback
 * const { setRef: dropzoneRef1, files: droppedFiles1 } = createDropzone({
 *   onDrop: async files => {
 *     await doStuff(2);
 *     files.forEach(f => console.log(f));
 *   },
 *   onDragStart: files => console.log("drag start")
 *   onDragStart: files => files.forEach(f => console.log(f)),
 *   onDragOver: files => console.log("drag over")
 * });
 * ```
 */
declare function createDropzone<T extends HTMLElement = HTMLElement>(options?: DropzoneOptions): Dropzone<T>;

declare module "solid-js" {
    namespace JSX {
        interface Directives {
            fileUploader: FileUploaderDirective;
        }
    }
}
declare const fileUploader: (element: HTMLInputElement, options: () => FileUploaderDirective) => void;

export { Dropzone, DropzoneOptions, FileUploader, FileUploaderDirective, FileUploaderOptions, UploadFile, UserCallback, UserCallback2, createDropzone, createFileUploader, fileUploader };
