import type { MapperCtx } from './runtime';
import { resolvePreviewValue } from './preview';
export function createOverlayTools(ctx: MapperCtx){ const rt=ctx.runtime; function scheduleOverlays(){ if(rt.overlayScheduled) return; rt.overlayScheduled=true; if(rt.overlayDebounceTimer) clearTimeout(rt.overlayDebounceTimer); if (rt.overlayRafId!==null) cancelAnimationFrame(rt.overlayRafId); const now=performance.now(); const delta=now-rt.lastOverlayDrawTime; const MIN=16; const run=()=>{ rt.overlayScheduled=false; rt.overlayRafId=null; rt.lastOverlayDrawTime=performance.now(); drawOverlays(); }; if (delta<MIN) rt.overlayDebounceTimer=setTimeout(()=>{ rt.overlayRafId=requestAnimationFrame(run); }, MIN-delta); else rt.overlayRafId=requestAnimationFrame(run); }
  function drawOverlays(){ const canvas=ctx.canvasEl(); if(!canvas) return; const c2d=canvas.getContext('2d'); if(!c2d) return; const cached=ctx.basePageImage(); if(!rt.overlayCanvas) rt.overlayCanvas=document.createElement('canvas'); if(canvas.width!==rt.lastOverlayCanvasSize.width || canvas.height!==rt.lastOverlayCanvasSize.height){ rt.overlayCanvas.width=canvas.width; rt.overlayCanvas.height=canvas.height; rt.lastOverlayCanvasSize={width:canvas.width,height:canvas.height}; } const octx=rt.overlayCanvas.getContext('2d',{alpha:false}); if(!octx) return; if (typeof (octx as any).measureText !== 'function'){ (octx as any).measureText = (txt:string)=> ({ width: txt.length * 6 }); } octx.clearRect(0,0,rt.overlayCanvas.width,rt.overlayCanvas.height); if(cached){ try { const tmp=document.createElement('canvas'); tmp.width=cached.width; tmp.height=cached.height; const tctx=tmp.getContext('2d'); if(tctx){ tctx.putImageData(cached,0,0); octx.drawImage(tmp,0,0);} } catch { octx.fillStyle='#fff'; octx.fillRect(0,0,rt.overlayCanvas.width,rt.overlayCanvas.height); } } else { octx.fillStyle='#fff'; octx.fillRect(0,0,rt.overlayCanvas.width,rt.overlayCanvas.height); } const pageIdx=ctx.pageIndex(); const sc=ctx.scale(); const mappings=ctx.mappings(); const preview=ctx.previewMode(); const dragging=ctx.draggingId(); const resizing=ctx.resizingId(); const selected=ctx.selectedId(); const visible=mappings.filter(m=> (m.page??0)===pageIdx); for(let i=0;i<visible.length;i++){ const m=visible[i]; const idx=mappings.indexOf(m); const x=m.llc.x*sc; const yBottom=m.llc.y*sc; const w=(m.urc.x-m.llc.x)*sc; const h=(m.urc.y-m.llc.y)*sc; const y=rt.overlayCanvas.height - yBottom - h; if (preview){ const resolved=m.key==='static'? (m.value??'') : resolvePreviewValue(m.key, ctx.previewCharacter()); const val=(resolved && resolved!==m.key)? resolved : (m.value??m.key); const fSize=m.format?.fontSize||12; const fName=(m.format?.fontName as any)||'Helvetica'; octx.font=`${fSize}px ${fName}`; const col=m.format?.fontColor; octx.fillStyle= col? `rgba(${Math.round(col.r*255)},${Math.round(col.g*255)},${Math.round(col.b*255)},1)` : '#000'; const maxW=w-4; let disp=val; if (octx.measureText(disp).width>maxW){ while(disp.length && octx.measureText(disp+'…').width>maxW) disp=disp.slice(0,-1); if(disp!==val) disp+='…'; } octx.fillText(disp, x+2, y+h-2); } else { const isDrag=dragging===idx; const isResize=resizing===idx; const isSel=selected===idx; octx.strokeStyle=isDrag||isResize?'orange':(isSel?'#00b7ff':'red'); octx.lineWidth=1.2; const ix=Math.round(x), iy=Math.round(y), iw=Math.round(w), ih=Math.round(h); octx.strokeRect(ix,iy,iw,ih); if(isSel){ octx.fillStyle='rgba(0,183,255,0.15)'; octx.fillRect(ix,iy,iw,ih);} else if(isDrag||isResize){ octx.fillStyle='rgba(255,165,0,0.10)'; octx.fillRect(ix,iy,iw,ih);} octx.font='10px sans-serif'; octx.fillStyle='red'; octx.fillText(m.key, ix+2, iy+10); octx.fillStyle='rgba(255,0,0,0.6)'; octx.fillRect(ix+iw-6, iy+ih-6, 6,6); } } try { c2d.clearRect(0,0,canvas.width,canvas.height); c2d.drawImage(rt.overlayCanvas,0,0); } catch {} }
  rt.scheduleOverlays = scheduleOverlays; return { scheduleOverlays, drawOverlays }; }
